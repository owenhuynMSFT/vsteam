name: $(Build.BuildID)

trigger:
- master

resources:
- repo: self

variables:
  Folder: 'dist'
  TEAM_CIBUILD: 'true'

stages:
- stage: Build
  displayName: Build Stage

  jobs:
  - job: macOS_Linux_Phase
    displayName: 'Build'
    strategy:
      matrix:
        macOS:
          OS: 'macOS'
          vmImageName: 'macOS-latest'
        Linux:
          OS: 'Linux'
          vmImageName: 'ubuntu-latest'
      maxParallel: 2
    pool:
      vmImage: $(vmImageName)
    steps:
    - template: build/unitTests.yml
      parameters:
        os: '$(OS)'

  - job: Windows_Phase
    displayName: Build Windows
    pool:
      vmImage: 'windows-latest'

    steps:
    - template: build/unitTests.yml
      parameters:
        os: 'Windows'
        buildHelp: 'true'

    - task: PowerShell@2
      displayName: 'Install PSScriptAnalyzer'
      inputs:
        targetType: 'inline'
        script: 'Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Force -Scope CurrentUser -Verbose'

    - task: PowerShell@2
      displayName: 'Run Static Code Analysis'
      inputs:
        targetType: 'inline'
        script: |
          # Has to happen in this task for it to take effect
          # Load the psd1 file so you can read the required modules and import them
          $manifest = Import-PowerShellDataFile .\dist\*.psd1

          # Import each module
          $manifest.RequiredModules | ForEach-Object { Import-Module -Name $_ }

          $r = Invoke-ScriptAnalyzer –Path ./dist –Recurse | Where-Object severity -ne "Information"
          $r | ForEach-Object {Write-Host "##vso[task.logissue type=$($_.Severity);sourcepath=$($_.ScriptPath);linenumber=$($_.Line);columnnumber=$($_.Column);]$($_.Message)"}

    - task: CopyFiles@2
      displayName: 'Copy Module to Artifacts Folder'
      inputs:
        Contents: |
          README.md
          .gitignore
          dist\**
        TargetFolder: '$(build.artifactstagingdirectory)/VSTeam'
        flattenFolders: false
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Module'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/VSTeam'
        artifact: 'module'
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))

    - task: CopyFiles@2
      displayName: 'Copy Integration Tests Artifacts Folder'
      inputs:
        Contents: |
          dist\*.psd1
          integration\**
        TargetFolder: '$(build.artifactstagingdirectory)/Tests'
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Tests'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/Tests'
        artifact: 'test'
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], false))
    